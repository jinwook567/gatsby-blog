{"componentChunkName":"component---src-templates-post-template-tsx","path":"/category1/스타수열/","result":{"pageContext":{"node":{"fields":{"slug":"/category1/스타수열/"},"excerpt":"문제 링크 해결 전략 처음에 이 문제를 완전탐색 형태로 해결하고자 하였다. a의 부분 수열을 모두 만들고, 스타 수열인지 확인하는 방식으로 알고리즘을 짰다. 하지만 이 방식은, a의 길이가 최대 500,000이므로 절대 만족할 수 없다. 조합의 경우 O(2^n)의 시간 복잡도를 가지기 때문이다. 그렇다면 반대로 생각해봐야 한다. 모든 부분 수열을 만들어보고 스타 수열인지 검증하는 대신, 주어진 배열을 활용해서 직접 스타 수열을 만들어보면 된다…","frontmatter":{"date":"2022-10-13T00:00:00.000Z","description":"백트래킹","title":"스타수열"},"html":"<p><a href=\"https://school.programmers.co.kr/learn/courses/30/lessons/70130\">문제 링크</a></p>\n<h1>해결 전략</h1>\n<p>처음에 이 문제를 완전탐색 형태로 해결하고자 하였다. a의 부분 수열을 모두 만들고, 스타 수열인지 확인하는 방식으로 알고리즘을 짰다. 하지만 이 방식은, a의 길이가 최대 500,000이므로 절대 만족할 수 없다. 조합의 경우 O(2^n)의 시간 복잡도를 가지기 때문이다.</p>\n<p>그렇다면 <strong>반대로 생각해봐야 한다.</strong> 모든 부분 수열을 만들어보고 스타 수열인지 검증하는 대신, 주어진 배열을 활용해서 직접 스타 수열을 만들어보면 된다!</p>\n<p>스타수열을 만들 때, 우리는 중복된 숫자가 꼭 필요하다. 따라서 중복된 숫자가 많을수록 더 길이가 긴 스타수열을 만들 수 있다. 하지만 중복된 숫자가 많다고 해서 꼭 스타수열의 길이가 긴 것은 아니기에, 중복된 숫자의 개수가 큰 순서대로 검증해나가는 백트래킹 방식을 사용하면 된다.</p>\n<p><code>[1,1,1,1,1,1,1,1,1,1,2,3,2,3,2]</code>과 같은 배열의 경우 1이 가장 많은 중복된 숫자지만, 1을 교집합으로 두었을 때 스타 수열을 만들 수 없다. 1이 연속적으로 배치되어 있어 i번쨰와 i+1번째가 같기 때문이다. 따라서 그 다음으로 중복된 개수가 많은 2를 검증해야 한다.</p>\n<p>스타 수열 조건을 만족하는 부분 수열들을 찾아나가면서 합하는 방식으로 스타 수열의 최대 길이를 구할 것이다. 최대한 길이가 긴 스타 수열을 구하기 위해서는 좌측부터 만족시키면서 나가면 된다. 그래야 우측에 남은 배열의 길이가 길어져 더 길이가 긴 부분 수열을 만들 수 있다.</p>\n<h1>전체 코드</h1>\n<pre><code class=\"language-js\">function solution(a) {\n  //배열 내에서, 중복된 숫자의 순서가 많은 순서대로 정렬한다.\n  const obj = {};\n  a.forEach(v => {\n    if (!obj[v]) obj[v] = 1;\n    else obj[v] += 1;\n  });\n\n  const sameNumberCounts = Object.entries(obj).sort((a, b) => b[1] - a[1]);\n\n  //스타 수열을 만족하는 최대 부분 수열을 찾는다.\n  let answer = 0;\n\n  for (let [number, cnt] of sameNumberCounts) {\n    number = Number(number);\n    if (answer > cnt) break;\n\n    let len = 0;\n    for (let i = 0; i &#x3C; a.length; i++) {\n      if (a[i + 1] === undefined) continue;\n\n      if (a[i] === number &#x26;&#x26; a[i + 1] !== number) {\n        len += 2;\n        i++;\n        continue;\n      }\n      //좌측부터 만족하는지 확인, 좌측부터 만족하는지 확인해야 남는 우측 길이가 김.\n\n      if (a[i] !== number &#x26;&#x26; a[i + 1] === number) {\n        len += 2;\n        i++;\n        continue;\n      }\n      //좌측이 만족하지 않는다면 우측으로 확인\n    }\n    answer = Math.max(answer, len);\n  }\n  return answer;\n}\n</code></pre>","id":"0881c861-7a6c-58ee-aa5a-4dc228c0df21"},"previous":{"fields":{"slug":"/category1/숫자게임/"},"excerpt":"문제 링크 해결 전략 우리는 B의 순서를 조정할 수 있다. 따라서 A의 순서를 바꿔도 상관없다. 순서가 변경된 A에 맞춰서 B의 순서를 변경하면 되기 때문이다. 우리는 근소한 차이로 이길 때, 최대한 많이 이길 수 있다. 예시로 1을 이기는데 9를 낼 필요는 없다는 것이다. 내가 2를 보유하고 있다면 2를 내는 것이 이득이다. 나중에 7과 같은 큰 수를 만나면 그 때 9를 내야한다. 위의 두 생각을 바탕으로 나는 A와 B를 내림차순으로 정렬하…","frontmatter":{"date":"2022-10-05T00:00:00.000Z","description":"그리디","title":"숫자 게임"},"html":"<p><a href=\"https://school.programmers.co.kr/learn/courses/30/lessons/12987\">문제 링크</a></p>\n<h1>해결 전략</h1>\n<ol>\n<li>\n<p>우리는 B의 순서를 조정할 수 있다. 따라서 A의 순서를 바꿔도 상관없다. 순서가 변경된 A에 맞춰서 B의 순서를 변경하면 되기 때문이다.</p>\n</li>\n<li>\n<p>우리는 근소한 차이로 이길 때, 최대한 많이 이길 수 있다. 예시로 1을 이기는데 9를 낼 필요는 없다는 것이다. 내가 2를 보유하고 있다면 2를 내는 것이 이득이다. 나중에 7과 같은 큰 수를 만나면 그 때 9를 내야한다.</p>\n</li>\n</ol>\n<p>위의 두 생각을 바탕으로 나는 A와 B를 내림차순으로 정렬하였다. 내림차순으로 정렬한 이유는 순서대로 비교해보았을 때, 어떤 순서에서 B 요소가 A 요소보다 크다면 해당 순서의 B 요소는 다음 순서로 등장하는 A의 요소들 전부를 이길 수 있기 때문이다. 즉 가장 근소한 차이로 이길 수 있는 순서를 알 수 있다는 말이다.</p>\n<p>나의 초기 알고리즘은 배열을 순회하면서 동일한 순서에 대해서 A 요소와 B 요소의 크기를 비교하는 것이였다. 하지만 이 알고리즘의 경우 이길 수 있는 개수를 누락시킨 다는 문제가 있었다. 예시는 아래와 같다.</p>\n<p><code>A: [5,3,1]</code>, <code>B:[4,2,0]</code>의 경우 내가 초기 작성한 알고리즘은 0이라는 정답을 도출한다. 하지만 실제 정답은 2이다. [A,B] 형태로 표현할 때, [3,4], [1,2] 2개의 케이스가 존재하기 때문이다.</p>\n<p>누락되는 문제를 해결하기 위해서는 비교하는 방식을 변경해주면 된다. 동일한 순서에 대해서만 비교해주는 것이 아니라, 만일 A가 B보다 클 경우 B의 순서는 고정시켜 놓고 A의 순서만 움직인다. 만일 B가 A보다 클 경우에는 A와 B 순서 둘다 움직여주면 된다.</p>\n<h1>전체 코드</h1>\n<pre><code class=\"language-javascript\">function solution(A, B) {\n  A.sort((a, b) => b - a);\n  B.sort((a, b) => b - a);\n\n  let answer = 0;\n  const len = A.length;\n\n  for (let i = 0, j = 0; i &#x3C; len; i++) {\n    if (A[i] &#x3C; B[j]) {\n      j++;\n      answer++;\n    }\n  }\n  return answer;\n}\n</code></pre>\n<h1>추가</h1>\n<p>추가로 내림차순으로 정렬을 하지 않고, 최대힙을 이용하는 방법도 있다.</p>\n<pre><code class=\"language-javascript\">class MaxHeap {\n  constructor() {\n    this.heap = [];\n  }\n\n  swap(aIndex, bIndex) {\n    [this.heap[aIndex], this.heap[bIndex]] = [\n      this.heap[bIndex],\n      this.heap[aIndex],\n    ];\n  }\n\n  push(value) {\n    this.heap.push(value);\n    let currentIndex = this.heap.length - 1;\n    let parentIndex = Math.floor((currentIndex - 1) / 2);\n\n    while (parentIndex >= 0 &#x26;&#x26; this.heap[parentIndex] &#x3C; value) {\n      this.swap(parentIndex, currentIndex);\n      currentIndex = parentIndex;\n      parentIndex = Math.floor((currentIndex - 1) / 2);\n    }\n  }\n\n  pop() {\n    if (this.heap.length === 0) return undefined;\n    if (this.heap.length === 1) return this.heap.pop();\n\n    const root = this.heap[0];\n    const end = this.heap.pop();\n    this.heap[0] = end;\n\n    let currentIndex = 0;\n    let leftIndex = 1;\n    let rightIndex = 2;\n\n    while (\n      this.heap[currentIndex] &#x3C; this.heap[leftIndex] ||\n      this.heap[currentIndex] &#x3C; this.heap[rightIndex]\n    ) {\n      if (this.heap[leftIndex] &#x3C; this.heap[rightIndex]) {\n        this.swap(currentIndex, rightIndex);\n        currentIndex = rightIndex;\n      } else {\n        this.swap(currentIndex, leftIndex);\n        currentIndex = leftIndex;\n      }\n      leftIndex = currentIndex * 2 + 1;\n      rightIndex = currentIndex * 2 + 2;\n    }\n    return root;\n  }\n}\n\nfunction solution(A, B) {\n  const heap_A = new MaxHeap();\n  const heap_B = new MaxHeap();\n  const len = A.length;\n\n  for (let i = 0; i &#x3C; len; i++) {\n    heap_A.push(A[i]);\n    heap_B.push(B[i]);\n  }\n  let answer = 0;\n\n  let maxA = heap_A.pop();\n  let maxB = heap_B.pop();\n\n  while (maxA) {\n    if (maxA &#x3C; maxB) {\n      answer++;\n      maxA = heap_A.pop();\n      maxB = heap_B.pop();\n    } else {\n      maxA = heap_A.pop();\n    }\n  }\n  return answer;\n}\n</code></pre>","id":"3dc7c838-686d-59fb-9e34-a0ac20288c1c"},"next":null}},"staticQueryHashes":["4031756233","4237942306"],"slicesMap":{}}